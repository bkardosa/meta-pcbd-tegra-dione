From 0bb8d4121248a2a403939aea60cea2492197b5cc Mon Sep 17 00:00:00 2001
From: Botond Kardos <bkardos70@gmail.com>
Date: Wed, 12 Jan 2022 10:07:52 +0100
Subject: [PATCH] dione_ir supports both sensors now, still messy

---
 nvidia/drivers/media/i2c/dione_ir.c           | 443 ++++++++++++++++--
 .../tegra210-camera-rbpcv2-dione-ir.dtsi      |   2 +-
 2 files changed, 393 insertions(+), 52 deletions(-)

diff --git a/nvidia/drivers/media/i2c/dione_ir.c b/nvidia/drivers/media/i2c/dione_ir.c
index 3212c231be0b..98e987d27eeb 100644
--- a/nvidia/drivers/media/i2c/dione_ir.c
+++ b/nvidia/drivers/media/i2c/dione_ir.c
@@ -33,10 +33,18 @@
 #include "tc358746_regs.h"
 
 
-#define DIONE640_I2C_ADDR  0x5a
-#define DIONE640_REG_WIDTH            0x00080188
-#define DIONE640_REG_WIDTH_MAX        0x0002f028
-#define DIONE640_REG_FIRMWARE_VERSION 0x2000e000
+#define DIONE640_I2C_ADDR              0x5a
+#define DIONE640_REG_WIDTH             0x00080188
+#define DIONE640_REG_WIDTH_MAX         0x0002f028
+#define DIONE640_REG_FIRMWARE_VERSION  0x2000e000
+
+#define DIONE1280_I2C_ADDR             0x5b
+#define DIONE1280_REG_WIDTH_MAX        0x0002f028
+#define DIONE1280_REG_HEIGHT_MAX       0x0002f02c
+#define DIONE1280_REG_MODEL_NAME       0x00000044
+#define DIONE1280_REG_FIRMWARE_VERSION 0x2000e000
+
+#define DIONE1280_I2C_TMO_MS           5
 
 
 static int test_mode = 0;
@@ -44,7 +52,7 @@ module_param(test_mode, int, 0644);
 
 enum {
 	DIONE_IR_MODE_640x480_60FPS,
-	DIONE_IR_MODE_1280x124_60FPS,
+	DIONE_IR_MODE_1280x1024_60FPS,
 };
 
 static const int dioneir_60fps[] = {
@@ -55,11 +63,16 @@ static const int dioneir_60fps[] = {
  * WARNING: frmfmt ordering need to match mode definition in
  * device tree!
  */
-static const struct camera_common_frmfmt dioneir_frmfmt[] = {
+static const struct camera_common_frmfmt dione640_frmfmt[] = {
 	{{640, 480},	dioneir_60fps, 1, 0, DIONE_IR_MODE_640x480_60FPS},
+	{{1280, 1024},	dioneir_60fps, 1, 0, DIONE_IR_MODE_1280x1024_60FPS},
 	/* Add modes with no device tree support after below */
 };
 
+static const struct camera_common_frmfmt dione1280_frmfmt[] = {
+	{{1280, 1024},	dioneir_60fps, 1, 0, DIONE_IR_MODE_1280x1024_60FPS},
+};
+
 static const struct regmap_range ctl_regmap_rw_ranges[] = {
 	regmap_reg_range(0x0000, 0x00ff),
 };
@@ -132,6 +145,7 @@ static inline int dioneir_read_reg(struct camera_common_data *s_data,
 	int err = 0;
 	u32 reg_val = 0;
 
+	printk( KERN_ALERT "**** %s %i\n", __func__, __LINE__);
 	err = regmap_read(s_data->regmap, addr, &reg_val);
 	*val = reg_val & 0xff;
 
@@ -143,6 +157,7 @@ static inline int dioneir_write_reg(struct camera_common_data *s_data,
 {
 	int err = 0;
 
+	printk( KERN_ALERT "**** %s %i\n", __func__, __LINE__);
 	err = regmap_write(s_data->regmap, addr, val);
 	if (err)
 		dev_err(s_data->dev, "%s: i2c write failed, 0x%x = %x",
@@ -191,6 +206,7 @@ static int dioneir_power_on(struct camera_common_data *s_data)
 	struct camera_common_pdata *pdata = s_data->pdata;
 	struct device *dev = s_data->dev;
 
+	printk( KERN_ALERT "**** %s %i\n", __func__, __LINE__);
 	dev_dbg(dev, "%s: power on\n", __func__);
 	if (pdata && pdata->power_on) {
 		err = pdata->power_on(pw);
@@ -266,6 +282,7 @@ static int dioneir_power_off(struct camera_common_data *s_data)
 	struct camera_common_pdata *pdata = s_data->pdata;
 	struct device *dev = s_data->dev;
 
+	printk( KERN_ALERT "**** %s %i\n", __func__, __LINE__);
 	dev_dbg(dev, "%s: power off\n", __func__);
 
 	if (pdata && pdata->power_off) {
@@ -303,6 +320,7 @@ static int dioneir_power_put(struct tegracam_device *tc_dev)
 	struct camera_common_power_rail *pw = s_data->power;
 	struct dione_struct *priv = (struct dione_struct *)tegracam_get_privdata(tc_dev);
 
+	printk( KERN_ALERT "**** %s %i\n", __func__, __LINE__);
 	if (unlikely(!pw))
 		return -EFAULT;
 
@@ -339,6 +357,7 @@ static int dioneir_power_get(struct tegracam_device *tc_dev)
 	struct clk *parent;
 	int err = 0;
 
+	printk( KERN_ALERT "**** %s %i\n", __func__, __LINE__);
 	if (!pdata) {
 		dev_err(dev, "pdata missing\n");
 		return -EFAULT;
@@ -620,31 +639,49 @@ struct tc358746_csi_param {
 
 static void tc358746_csi_param_set_default(
 		struct tc358746_csi_param *param,
-		bool discontinuous_clk)
+		bool discontinuous_clk, u32 fmt_width)
 {
 	param->is_continuous_clk = !discontinuous_clk;
 
-	param->lineinitcnt = 4000;
-	param->lptxtimecnt = 3;
-
-	param->tclk_preparecnt = 2;
-	param->tclk_zerocnt = 18;
-
-	/* default, skipped but value in excell = 0 */
-	param->tclk_trailcnt = 1;
-
-	param->ths_preparecnt = 3;
-	param->ths_zerocnt = 0;
-
-	param->twakeupcnt = 17000;
-
-	/* default, skipped but value in excell = 4 */
-	param->tclk_postcnt = 0;
-
-	param->ths_trailcnt = 1;
-
-	/* only presents in the excell, default: 32 */
-	param->hstxvregcnt = 5;
+	switch (fmt_width) {
+		case 640:
+			param->lineinitcnt = 4000;
+			param->lptxtimecnt = 3;
+
+			param->tclk_preparecnt = 2;
+			param->tclk_zerocnt = 18;
+
+			/* default, skipped but value in excell = 0 */
+			param->tclk_trailcnt = 1;
+
+			param->ths_preparecnt = 3;
+			param->ths_zerocnt = 0;
+
+			param->twakeupcnt = 17000;
+
+			/* default, skipped but value in excell = 4 */
+			param->tclk_postcnt = 0;
+
+			param->ths_trailcnt = 1;
+
+			/* only presents in the excell, default: 32 */
+			param->hstxvregcnt = 5;
+			break;
+
+		case 1280:
+			param->lineinitcnt = 6500;
+			param->lptxtimecnt = 6;
+			param->tclk_preparecnt = 6;
+			param->tclk_zerocnt = 35;
+			param->tclk_trailcnt = 4;
+			param->ths_preparecnt = 6;
+			param->ths_zerocnt = 8;
+			param->twakeupcnt = 25000;
+			param->tclk_postcnt = 12;
+			param->ths_trailcnt = 5;
+			param->hstxvregcnt = 5;
+			break;
+	} /* switch(fmt_width) */
 }
 
 static int tc358746_set_csi(struct regmap *regmap,
@@ -805,7 +842,7 @@ static int tc358746_enable_csi_module(struct regmap *regmap, int lane_num)
 	return err;
 }
 
-static int dioneir_set_mode(struct tegracam_device *tc_dev)
+static int dione640_set_mode(struct tegracam_device *tc_dev)
 {
 	struct dione_struct *priv = (struct dione_struct *)tegracam_get_privdata(tc_dev);
 	struct camera_common_data *s_data = priv->s_data;
@@ -843,7 +880,93 @@ static int dioneir_set_mode(struct tegracam_device *tc_dev)
 	struct tc358746_csi_param csi_setting;
 	bool discontinuous_clk = true;
 
-	tc358746_csi_param_set_default(&csi_setting, discontinuous_clk);
+	printk( KERN_ALERT "**** %s %i   mode: %i   sensor_mode_id: %i\n",
+			__func__, __LINE__, s_data->mode, s_data->sensor_mode_id);
+	if (s_data->mode != 0)
+		return -EINVAL;
+
+	tc358746_csi_param_set_default(&csi_setting, discontinuous_clk, fmt_width);
+
+	regmap_write(ctl_regmap, DBG_ACT_LINE_CNT, 0);
+
+	err = tc358746_sreset(ctl_regmap);
+	if (err) {
+		dev_err(tc_dev->dev, "Failed to reset chip\n");
+		return err;
+	}
+
+	err = tc358746_set_pll(ctl_regmap, pll_prd, pll_fbd, pll_frs);
+	if (err) {
+		dev_err(tc_dev->dev, "Failed to setup PLL\n");
+		return err;
+	}
+
+	err = tc358746_set_csi_color_space(ctl_regmap, pdformat, pdataf);
+
+	if (!err)
+		err = tc358746_set_buffers(ctl_regmap, fmt_width, bpp, vb_fifo);
+
+	if (!err)
+		err = tc358746_enable_csi_lanes(tx_regmap, lane_num, true);
+
+	if (!err)
+		err = tc358746_set_csi(tx_regmap, &csi_setting);
+
+	if (!err && test_mode)
+		err = tc38764_debug_pattern_80(ctl_regmap);
+
+	if (!err)
+		err = tc358746_enable_csi_module(tx_regmap, lane_num);
+
+	if (err)
+		dev_err(tc_dev->dev, "%s return code (%d)\n", __func__, err);
+	return err;
+}
+
+static int dione1280_set_mode(struct tegracam_device *tc_dev)
+{
+	struct dione_struct *priv = (struct dione_struct *)tegracam_get_privdata(tc_dev);
+	struct camera_common_data *s_data = priv->s_data;
+	struct regmap *ctl_regmap = s_data->regmap;
+	struct regmap *tx_regmap = priv->tx_regmap;
+	int err;
+
+	/* Parameters:
+	 *
+	 * 1. pll setup:
+	 * - pll_prd: Pre Divider value // calc
+	 * - pll_fbd: Multiply value of Unit Clock // calc
+	 * - pll_frs: CSI speed/lane // calc
+	 *
+	 * 2. setup format: RGB888
+	 * - pdformat: 0x3 // dt
+	 * - pdataformat: 0x0 // dt
+	 *
+	 * 3. setup buffers:
+	 * - fmt_width = 640 // dt
+	 * - bpp = 24 (bits per pixel) // dt
+	 * - vb_fifo = 247 (fifo size) // calc
+	 *
+	 * 4. setup csi lanes
+	 * - lane_num = 2 // dt
+	 * - struct tc358746_csi_param // calc
+	 * - discontinuous_clk = true // dt
+	 *
+	 * 5. test_mode
+	 */
+	u16 pll_prd = 3, pll_fbd = 125, pll_frs = 0;
+	u8 pdformat = 0x3, pdataf = 0x0;
+	u32 fmt_width = 1280; u8 bpp = 24; u16 vb_fifo = 2;
+	int lane_num = 2;
+	struct tc358746_csi_param csi_setting;
+	bool discontinuous_clk = false;
+
+	printk( KERN_ALERT "**** %s %i   mode: %i   sensor_mode_id: %i\n",
+			__func__, __LINE__, s_data->mode, s_data->sensor_mode_id);
+	if (s_data->mode != 1)
+		return -EINVAL;
+
+	tc358746_csi_param_set_default(&csi_setting, discontinuous_clk, fmt_width);
 
 	regmap_write(ctl_regmap, DBG_ACT_LINE_CNT, 0);
 
@@ -888,6 +1011,7 @@ static int dioneir_start_streaming(struct tegracam_device *tc_dev)
 	struct regmap *ctl_regmap = s_data->regmap;
 	int err;
 
+	printk( KERN_ALERT "**** %s %i\n", __func__, __LINE__);
 	err = regmap_write(ctl_regmap, PP_MISC, 0);
 	if (test_mode) {
 		if (!err)
@@ -912,6 +1036,7 @@ static int dioneir_stop_streaming(struct tegracam_device *tc_dev)
 	struct regmap *tx_regmap = priv->tx_regmap;
 	int err;
 
+	printk( KERN_ALERT "**** %s %i\n", __func__, __LINE__);
 	err = regmap_update_bits(ctl_regmap, PP_MISC, PP_MISC_FRMSTOP_MASK,
 				 PP_MISC_FRMSTOP_MASK);
 	if (!err)
@@ -935,9 +1060,9 @@ static int dioneir_stop_streaming(struct tegracam_device *tc_dev)
 	return err;
 }
 
-static struct camera_common_sensor_ops dioneir_common_ops = {
-	.numfrmfmts = ARRAY_SIZE(dioneir_frmfmt),
-	.frmfmt_table = dioneir_frmfmt,
+static struct camera_common_sensor_ops dione640_common_ops = {
+	.numfrmfmts = ARRAY_SIZE(dione640_frmfmt),
+	.frmfmt_table = dione640_frmfmt,
 	.power_on = dioneir_power_on,
 	.power_off = dioneir_power_off,
 	.write_reg = dioneir_write_reg,
@@ -945,7 +1070,22 @@ static struct camera_common_sensor_ops dioneir_common_ops = {
 	.parse_dt = dioneir_parse_dt,
 	.power_get = dioneir_power_get,
 	.power_put = dioneir_power_put,
-	.set_mode = dioneir_set_mode,
+	.set_mode = dione640_set_mode,
+	.start_streaming = dioneir_start_streaming,
+	.stop_streaming = dioneir_stop_streaming,
+};
+
+static struct camera_common_sensor_ops dione1280_common_ops = {
+	.numfrmfmts = ARRAY_SIZE(dione640_frmfmt),
+	.frmfmt_table = dione640_frmfmt,
+	.power_on = dioneir_power_on,
+	.power_off = dioneir_power_off,
+	.write_reg = dioneir_write_reg,
+	.read_reg = dioneir_read_reg,
+	.parse_dt = dioneir_parse_dt,
+	.power_get = dioneir_power_get,
+	.power_put = dioneir_power_put,
+	.set_mode = dione1280_set_mode,
 	.start_streaming = dioneir_start_streaming,
 	.stop_streaming = dioneir_stop_streaming,
 };
@@ -990,6 +1130,87 @@ static int dione640_i2c_read(struct i2c_client *client, u32 dev_addr, void *dst,
 } /* dione640_i2c_read */
 
 
+static int generic_i2c_read(struct i2c_client *client, void *buf, size_t len)
+{
+	struct i2c_msg msgs[1];
+	int ret;
+
+	msgs[0].addr = client->addr;
+	msgs[0].flags = I2C_M_RD;
+	msgs[0].len = len;
+	msgs[0].buf = buf;
+
+	ret = i2c_transfer(client->adapter, msgs, ARRAY_SIZE(msgs));
+	return ret;
+} /* generic_i2c_read */
+
+
+static int generic_i2c_write(struct i2c_client *client, void *buf, size_t len)
+{
+	struct i2c_msg msgs[1];
+	int ret;
+
+	msgs[0].addr = client->addr;
+	msgs[0].flags = 0;
+	msgs[0].len = len;
+	msgs[0].buf = buf;
+
+	ret = i2c_transfer(client->adapter, msgs, ARRAY_SIZE(msgs));
+	return ret;
+} /* generic_i2c_write */
+
+
+static int dione1280_i2c_read( struct i2c_client *client, u32 addr, u8 *buf, u16 len )
+{
+	u8 tmp_buf[72];
+	int ret, tmo, retry;
+
+	ret = 0;
+	if (len > sizeof(tmp_buf) - 2)
+		ret = -1;
+
+	if (!ret) {
+		*( (u32 *)tmp_buf ) = addr;
+		*( (u16 *)tmp_buf + 2 ) = len;
+		retry = 4;
+		tmo = DIONE1280_I2C_TMO_MS ;
+		ret = -1;
+		while (retry-- > 0) {
+			if (generic_i2c_write(client, tmp_buf, 6) == 1) {
+				ret = 0;
+				break;
+			}
+			msleep(tmo);
+			tmo <<= 2;
+		}
+	}
+
+	if (!ret) {
+		retry = 4;
+		tmo = DIONE1280_I2C_TMO_MS ;
+		ret = -1;
+		msleep(2);
+		while (retry-- > 0) {
+			if (generic_i2c_read(client, tmp_buf, len+2) == 1) {
+				ret = 0;
+				break;
+			}
+			msleep(tmo);
+			tmo <<= 2;
+		}
+	}
+
+	if (!ret) {
+		if ((tmp_buf[0] != 0) || (tmp_buf[1] != 0))
+			ret = -1;
+		else
+			memcpy(buf, tmp_buf+2, len);
+	}
+
+	return ret;
+}
+
+
 static int detect_dione640(struct dione_struct *priv)
 {
 	struct device *dev = priv->s_data->dev;
@@ -1036,7 +1257,46 @@ static int detect_dione640(struct dione_struct *priv)
 
 static int detect_dione1280(struct dione_struct *priv)
 {
-	return -1;
+	struct device *dev = priv->s_data->dev;
+	u8 buf[64];
+	u32 reg_val;
+	int cnt;
+	int ret = 0;
+
+	msleep(200);
+
+	priv->fpga_client = i2c_new_dummy(priv->tc35_client->adapter, DIONE1280_I2C_ADDR);
+    printk( KERN_ALERT "**** %s %i   fpga_client: 0x%08lx\n", __func__, __LINE__, (long )priv->fpga_client );
+
+	if (!priv->fpga_client)
+		ret = -ENODEV;
+
+	if (!ret) {
+		ret = dione1280_i2c_read(priv->fpga_client, DIONE1280_REG_WIDTH_MAX, (u8 *)&reg_val, 4);
+		printk( KERN_ALERT "**** %s %i   ret: %i   WidthMax: %i\n", __func__, __LINE__, ret, (int )reg_val);
+		if (ret || (reg_val != 1280))
+			ret = -ENODEV;
+	}
+
+	if (!ret) {
+		ret = dione1280_i2c_read(priv->fpga_client, DIONE1280_REG_FIRMWARE_VERSION, buf, 64);
+		if (!ret) {
+			cnt = 63;
+			while ((cnt > 0) && (buf[cnt] == 0xff))
+				buf[cnt--] = 0;
+			dev_info(dev, "FirmwareVersion: %s\n", buf);
+		}
+		else
+		  printk( KERN_ALERT "**** %s %i   ret: %i\n", __func__, __LINE__, ret);
+	}
+
+	if (ret)
+		if (priv->fpga_client != NULL) {
+			i2c_unregister_device(priv->fpga_client);
+			priv->fpga_client = NULL;
+		}
+
+	return ret;
 }
 
 static int dioneir_board_setup(struct dione_struct *priv)
@@ -1062,21 +1322,7 @@ static int dioneir_board_setup(struct dione_struct *priv)
 		goto err_power_on;
 	}
 
-	do {
-	  err = detect_dione640(priv);
-	  if (!err)
-		break;
-
-	  err = detect_dione1280(priv);
-	  if (!err)
-		break;
-	} while(0);
-
-	printk( KERN_ALERT "**** %s %i   err: %i\n", __func__, __LINE__, err);
-	if (err) {
-		dev_err(dev, "%s: error, no sensor found\n", __func__);
-		goto err_reg_probe;
-	}
+	msleep(500);
 
 	/* Probe sensor model id registers */
 	err = regmap_read(ctl_regmap, CHIPID, &reg_val);
@@ -1093,6 +1339,18 @@ static int dioneir_board_setup(struct dione_struct *priv)
 		goto err_reg_probe;
 	}
 
+	if (s_data->ops == &dione640_common_ops)
+		err = detect_dione640(priv);
+
+	if (s_data->ops == &dione1280_common_ops)
+		err = detect_dione1280(priv);
+
+	printk( KERN_ALERT "**** %s %i   err: %i\n", __func__, __LINE__, err);
+	if (err) {
+		dev_err(dev, "%s: error, no sensor found\n", __func__);
+		goto err_reg_probe;
+	}
+
 err_reg_probe:
 	dioneir_power_off(s_data);
 
@@ -1117,6 +1375,66 @@ static const struct v4l2_subdev_internal_ops dioneir_subdev_internal_ops = {
 	.open = dioneir_open,
 };
 
+static struct tegracam_device *dioneir_probe_one( struct dione_struct *priv,
+												  struct camera_common_sensor_ops *ops )
+{
+	struct tegracam_device *tc_dev;
+	struct device *dev = &priv->tc35_client->dev;
+	int err;
+
+    printk( KERN_ALERT "**** %s %i   dev: 0x%08lx\n", __func__, __LINE__, (long )dev);
+	tc_dev = devm_kzalloc(dev, sizeof(struct tegracam_device), GFP_KERNEL);
+	if (!tc_dev)
+		return NULL;
+
+    printk( KERN_ALERT "**** %s %i\n", __func__, __LINE__);
+	tc_dev->client = priv->tc35_client;
+	tc_dev->dev = dev;
+	strncpy(tc_dev->name, "dione_ir", sizeof(tc_dev->name));
+	tc_dev->dev_regmap_config = &ctl_regmap_config;
+	tc_dev->sensor_ops = ops;
+	tc_dev->v4l2sd_internal_ops = &dioneir_subdev_internal_ops;
+	tc_dev->tcctrl_ops = &dioneir_ctrl_ops;
+
+	err = tegracam_device_register(tc_dev);
+    printk( KERN_ALERT "**** %s %i   err: %i\n", __func__, __LINE__, err);
+	if (err) {
+		devm_kfree(tc_dev->dev, tc_dev);
+		tc_dev = NULL;
+		dev_err(dev, "tegra camera driver registration failed\n");
+	}
+
+	if (!err) {
+		priv->tc_dev = tc_dev;
+		priv->s_data = tc_dev->s_data;
+		priv->subdev = &tc_dev->s_data->subdev;
+		tegracam_set_privdata(tc_dev, (void *)priv);
+
+		priv->tx_regmap = devm_regmap_init_i2c(priv->tc35_client,
+											   &tx_regmap_config);
+		printk( KERN_ALERT "**** %s %i\n", __func__, __LINE__);
+		if (IS_ERR(priv->tx_regmap)) {
+			dev_err(dev, "tx_regmap init failed: %ld\n",
+					PTR_ERR(priv->tx_regmap));
+			err = -ENODEV;
+		}
+	}
+
+    printk( KERN_ALERT "**** %s %i   err: %i\n", __func__, __LINE__, err);
+	if (!err)
+		err = dioneir_board_setup(priv);
+
+    printk( KERN_ALERT "**** %s %i   err: %i\n", __func__, __LINE__, err);
+	if (err) {
+		if (!!tc_dev)
+			tegracam_device_unregister(tc_dev);
+		tc_dev = NULL;
+		dev_err(dev, "board setup failed\n");
+	}
+
+	return tc_dev;
+}
+
 static int dioneir_probe(struct i2c_client *client,
 	const struct i2c_device_id *id)
 {
@@ -1130,10 +1448,12 @@ static int dioneir_probe(struct i2c_client *client,
 	if (!IS_ENABLED(CONFIG_OF) || !client->dev.of_node)
 		return -EINVAL;
 
+    printk( KERN_ALERT "**** %s %i   dev: 0x%08lx\n", __func__, __LINE__, (long )dev);
 	priv = devm_kzalloc(dev, sizeof(struct dione_struct), GFP_KERNEL);
 	if (!priv)
 		return -ENOMEM;
 
+#if 0
 	tc_dev = devm_kzalloc(dev, sizeof(struct tegracam_device), GFP_KERNEL);
 	if (!tc_dev)
 		return -ENOMEM;
@@ -1142,7 +1462,7 @@ static int dioneir_probe(struct i2c_client *client,
 	tc_dev->dev = dev;
 	strncpy(tc_dev->name, "dione_ir", sizeof(tc_dev->name));
 	tc_dev->dev_regmap_config = &ctl_regmap_config;
-	tc_dev->sensor_ops = &dioneir_common_ops;
+	tc_dev->sensor_ops = &dione640_common_ops;
 	tc_dev->v4l2sd_internal_ops = &dioneir_subdev_internal_ops;
 	tc_dev->tcctrl_ops = &dioneir_ctrl_ops;
 
@@ -1173,6 +1493,21 @@ static int dioneir_probe(struct i2c_client *client,
 		return err;
 	}
 
+#else
+	priv->tc35_client = client;
+
+    printk( KERN_ALERT "**** %s %i\n", __func__, __LINE__);
+	tc_dev = dioneir_probe_one(priv, &dione640_common_ops);
+
+    printk( KERN_ALERT "**** %s %i   tc_dev:0x%08lx\n", __func__, __LINE__, (long )tc_dev);
+	if (!tc_dev) {
+		tc_dev = dioneir_probe_one(priv, &dione1280_common_ops);
+		printk( KERN_ALERT "**** %s %i   tc_dev:0x%08lx\n", __func__, __LINE__, (long )tc_dev);
+	}
+
+	if (!!tc_dev) {
+#endif
+
 	err = tegracam_v4l2subdev_register(tc_dev, true);
 	if (err) {
 		dev_err(dev, "tegra camera subdev registration failed\n");
@@ -1183,6 +1518,12 @@ static int dioneir_probe(struct i2c_client *client,
 	dev_info(dev, "detected Dione IR sensor\n");
 
 	return 0;
+
+#if 1
+	}
+
+	return -ENODEV;
+#endif
 }
 
 static int dioneir_remove(struct i2c_client *client)
diff --git a/nvidia/platform/t210/porg/kernel-dts/porg-platforms/tegra210-camera-rbpcv2-dione-ir.dtsi b/nvidia/platform/t210/porg/kernel-dts/porg-platforms/tegra210-camera-rbpcv2-dione-ir.dtsi
index e10c570d22c7..445635538653 100644
--- a/nvidia/platform/t210/porg/kernel-dts/porg-platforms/tegra210-camera-rbpcv2-dione-ir.dtsi
+++ b/nvidia/platform/t210/porg/kernel-dts/porg-platforms/tegra210-camera-rbpcv2-dione-ir.dtsi
@@ -78,7 +78,7 @@
 
 				sensor_model = "dione_ir";
 
-				use_sensor_mode_id = "true";
+				use_sensor_mode_id = "false";
 
 				/**
 				* ==== Modes ====
-- 
2.25.1

