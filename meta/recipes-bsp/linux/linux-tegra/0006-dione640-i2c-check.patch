From f74aa9e53587acd4e58843ef6ab5ab9936bf8f60 Mon Sep 17 00:00:00 2001
From: Botond Kardos <bkardos70@gmail.com>
Date: Wed, 22 Dec 2021 16:56:35 +0100
Subject: [PATCH] dione640 now checks Dione640 I2C registers

---
 nvidia/drivers/media/i2c/dione640.c | 79 +++++++++++++++++++++++++++++
 1 file changed, 79 insertions(+)

diff --git a/nvidia/drivers/media/i2c/dione640.c b/nvidia/drivers/media/i2c/dione640.c
index b8265c88aa4b..846867e9463c 100644
--- a/nvidia/drivers/media/i2c/dione640.c
+++ b/nvidia/drivers/media/i2c/dione640.c
@@ -32,6 +32,12 @@
 
 #include "tc358746_regs.h"
 
+
+#define DIONE640_REG_WIDTH            0x00080188
+#define DIONE640_REG_WIDTH_MAX        0x0002f028
+#define DIONE640_REG_FIRMWARE_VERSION 0x2000e000
+
+
 static int test_mode = 0;
 module_param(test_mode, int, 0644);
 
@@ -205,6 +211,7 @@ static int dione640_power_on(struct camera_common_data *s_data)
 	struct camera_common_pdata *pdata = s_data->pdata;
 	struct device *dev = s_data->dev;
 
+    printk( KERN_ALERT "**** %s %i\n", __func__, __LINE__ );
 	dev_dbg(dev, "%s: power on\n", __func__);
 	if (pdata && pdata->power_on) {
 		err = pdata->power_on(pw);
@@ -215,7 +222,9 @@ static int dione640_power_on(struct camera_common_data *s_data)
 		return err;
 	}
 
+    printk( KERN_ALERT "**** %s %i\n", __func__, __LINE__ );
 	if (pw->reset_gpio) {
+		printk( KERN_ALERT "**** %s %i\n", __func__, __LINE__ );
 		if (gpio_cansleep(pw->reset_gpio))
 			gpio_set_value_cansleep(pw->reset_gpio, 0);
 		else
@@ -355,6 +364,7 @@ static int dione640_power_get(struct tegracam_device *tc_dev)
 	struct clk *parent;
 	int err = 0;
 
+    printk( KERN_ALERT "**** %s %i\n", __func__, __LINE__ );
 	if (!pdata) {
 		dev_err(dev, "pdata missing\n");
 		return -EFAULT;
@@ -397,6 +407,7 @@ static int dione640_power_get(struct tegracam_device *tc_dev)
 	}
 
 	/* Reset or ENABLE GPIO */
+    printk( KERN_ALERT "**** %s %i\n", __func__, __LINE__ );
 	pw->reset_gpio = pdata->reset_gpio;
 	err = gpio_request(pw->reset_gpio, "cam_reset_gpio");
 	if (err < 0) {
@@ -436,6 +447,7 @@ static struct camera_common_pdata *dione640_parse_dt(
 	if (!board_priv_pdata)
 		return NULL;
 
+    printk( KERN_ALERT "**** %s %i\n", __func__, __LINE__ );
 	gpio = of_get_named_gpio(np, "reset-gpios", 0);
 	if (gpio < 0) {
 		if (gpio == -EPROBE_DEFER)
@@ -445,6 +457,7 @@ static struct camera_common_pdata *dione640_parse_dt(
 	}
 	board_priv_pdata->reset_gpio = (unsigned int)gpio;
 
+    printk( KERN_ALERT "**** %s %i\n", __func__, __LINE__ );
 	err = of_property_read_string(np, "mclk", &board_priv_pdata->mclk_name);
 	if (err)
 		dev_dbg(dev, "mclk name not present, "
@@ -963,14 +976,58 @@ static struct camera_common_sensor_ops dione640_common_ops = {
 	.stop_streaming = dione640_stop_streaming,
 };
 
+
+static int generic_i2c_read(struct i2c_client *client, u32 dev_addr, void *dst,
+							size_t len)
+{
+	struct i2c_msg msgs[2];
+	u8 tmp_buf[72];
+	int ret;
+
+	ret = 0;
+	if (len > sizeof(tmp_buf) - 2)
+		ret = -1;
+
+	if (!ret) {
+		*( (u32 *)tmp_buf ) = dev_addr;
+		*( (u16 *)tmp_buf + 2 ) = len;
+
+		msgs[0].addr = client->addr;
+		msgs[0].flags = 0;
+		msgs[0].len = 6;
+		msgs[0].buf = tmp_buf;
+
+		msgs[1].addr = client->addr;
+		msgs[1].flags = I2C_M_RD;
+		msgs[1].len = len + 2;
+		msgs[1].buf = tmp_buf;
+
+		if (i2c_transfer(client->adapter, msgs, ARRAY_SIZE(msgs)) != 2)
+			ret = -1;
+	}
+
+	if (!ret) {
+		if ((tmp_buf[0] != 0) || (tmp_buf[1] != 0))
+			ret = -1;
+		else
+			memcpy(dst, tmp_buf+2, len);
+	}
+
+	return ret;
+} /* generic_i2c_read */
+
+
 static int dione640_board_setup(struct dione640 *priv)
 {
 	struct camera_common_data *s_data = priv->s_data;
 	struct camera_common_pdata *pdata = s_data->pdata;
 	struct device *dev = s_data->dev;
 	struct regmap *ctl_regmap = priv->ctl_regmap;
+	u8 buf[64];
+	int ret;
 	u32 reg_val;
 	int err = 0;
+	int cnt;
 
 	if (pdata->mclk_name) {
 		err = camera_common_mclk_enable(s_data);
@@ -986,6 +1043,8 @@ static int dione640_board_setup(struct dione640 *priv)
 		goto err_power_on;
 	}
 
+	msleep( 200 );
+
 	/* Probe sensor model id registers */
 	err = regmap_read(ctl_regmap, CHIPID, &reg_val);
 	if (err) {
@@ -1001,6 +1060,26 @@ static int dione640_board_setup(struct dione640 *priv)
 		goto err_reg_probe;
 	}
 
+	ret = generic_i2c_read(priv->sens_client, DIONE640_REG_WIDTH_MAX, (u8 *)&reg_val, 4);
+	if (ret || (reg_val != 640)) {
+		printk( KERN_ALERT "**** %s %i   ret: %i   WidthMax: %i\n", __func__, __LINE__, ret, (int )reg_val);
+		err = -ENODEV;
+		goto err_reg_probe;
+	}
+
+	ret = generic_i2c_read(priv->sens_client, DIONE640_REG_FIRMWARE_VERSION, buf, 64);
+	if (!ret) {
+		cnt = 63;
+		while ((cnt > 0) && (buf[cnt] == 0xff))
+			buf[cnt--] = 0;
+		dev_info(dev, "FirmwareVersion: %s\n", buf);
+	}
+	else {
+		printk( KERN_ALERT "**** %s %i   ret: %i\n", __func__, __LINE__, ret);
+		err = -ENODEV;
+		goto err_reg_probe;
+	}
+
 err_reg_probe:
 	dione640_power_off(s_data);
 
-- 
2.25.1

